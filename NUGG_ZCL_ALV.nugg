<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZCL_ALV">
 <CLAS CLSNAME="ZCL_ALV" VERSION="1" LANGU="1" DESCRIPT="ALV" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_GUI_ALV_GRID">
  <types CLSNAME="ZCL_ALV" CMPNAME="_TY_S_FORM" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="23 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF _ty_s_form,
          eventid type char50,
          formname type char50,
          repid type repid,
       END OF _ty_s_form
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations
CLASS LCL_RECEIVER_SET_DIMENSIONS DEFINITION.
  PUBLIC SECTION.
    data o_alv type ref to zcl_alv.
    methods:
      consctructor changing io_alv type ref to zcl_alv,
      evt_save for event user_command of zcl_alv importing e_ucomm,
      evt_close for event user_command of zcl_alv importing e_ucomm.
ENDCLASS.
CLASS LCL_RECEIVER_SET_DIMENSIONS IMPLEMENTATION.
  method consctructor..
    o_alv = io_alv.
  endmethod.
  method evt_save.
    check e_ucomm = &apos;&amp;ZSAVE&apos;.


  endmethod.
  method evt_close.
    check e_ucomm = &apos;&amp;CLOSE&apos;.
  endmethod.
ENDCLASS.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes

class lcl_Test definition for testing
  duration short
  risk level harmless
.
*?﻿&lt;asx:abap xmlns:asx=&quot;http://www.sap.com/abapxml&quot; version=&quot;1.0&quot;&gt;
*?&lt;asx:values&gt;
*?&lt;TESTCLASS_OPTIONS&gt;
*?&lt;TEST_CLASS&gt;lcl_Test
*?&lt;/TEST_CLASS&gt;
*?&lt;TEST_MEMBER&gt;f_Cut
*?&lt;/TEST_MEMBER&gt;
*?&lt;OBJECT_UNDER_TEST&gt;ZCL_ALV
*?&lt;/OBJECT_UNDER_TEST&gt;
*?&lt;OBJECT_IS_LOCAL/&gt;
*?&lt;GENERATE_FIXTURE/&gt;
*?&lt;GENERATE_CLASS_FIXTURE/&gt;
*?&lt;GENERATE_INVOCATION/&gt;
*?&lt;GENERATE_ASSERT_EQUAL/&gt;
*?&lt;/TESTCLASS_OPTIONS&gt;
*?&lt;/asx:values&gt;
*?&lt;/asx:abap&gt;
  private section.
* ================
    data:
      T_MSEG TYPE table of MSEG,
      f_Cut type ref to zcl_Alv.  &quot;class under test

    methods: collect_Dimension for testing.
endclass.       &quot;lcl_Test


class lcl_Test implementation.
* ==============================

  method collect_Dimension.
* =========================
    select * INTO table T_MSEG FROM MSEG up to 100 ROWS.
    zcl_alv=&gt;CREATE( exporting i_popup = abap_true collect_mode = abap_true changing ct_table = T_MSEG RO_ALV = F_CUT ).
    F_CUT-&gt;SET_FCAT( |FIELDNAME:MATNR;| &amp;
                     |FIELDNAME:MENGE| ).
    F_CUT-&gt;COLLECT_DIMENSION( e_ucomm = &apos;&amp;SET_DIM&apos; ).

  endmethod.       &quot;collect_Dimension




endclass.       &quot;lcl_Test</localTestClasses>
  <classDocumentation OBJECT="ZCL_ALV">
   <language SPRAS="1">
    <textLine TDFORMAT="U1" TDLINE="&amp;FUNCTIONALITY&amp;"/>
    <textLine TDFORMAT="U1"/>
    <textLine TDFORMAT="U1"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;RELATIONS&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;EXAMPLE&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;HINTS&amp;"/>
    <textLine TDFORMAT="AS"/>
    <textLine TDFORMAT="U1" TDLINE="&amp;FURTHER_SOURCES_OF_INF&amp;"/>
    <textLine TDFORMAT="AS"/>
   </language>
  </classDocumentation>
  <typeUsage CLSNAME="ZCL_ALV" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="COLLECT_MODE_ACTIVATED" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="FCAT_TABLE" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="7 " SRCCOLUMN2="38 " TYPESRC_LENG="37 " TYPESRC="FCAT_TABLE TYPE table of LVC_T_FCAT
"/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="FIRST_SHOW" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTRDONLY="X" ATTVALUE="ABAP_TRUE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="GS_VARIANT" VERSION="1" LANGU="1" DESCRIPT="ABAP/4：变式名称（不含程序名称）" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DISVARIANT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="GT_FORM" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="25 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="35 " TYPESRC_LENG="34 " TYPESRC="GT_FORM type table of _ty_s_form
"/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="OUTTAB" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="O_PARENT" VERSION="1" LANGU="1" DESCRIPT="Abstract Container for GUI Controls" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="SOURCE_DATA" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="4 " SRCCOLUMN2="40 " TYPESRC_LENG="39 " TYPESRC="SOURCE_DATA type table of ref to DATA
"/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="S_LAYO" VERSION="1" LANGU="1" DESCRIPT="ALV 控制: 布局结构" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_S_LAYO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="TITLE" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="TOOLBAR_ADDED" VERSION="1" LANGU="1" DESCRIPT="工具栏按钮" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TTB_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="TOOLBAR_DELETED" VERSION="1" LANGU="1" DESCRIPT="工具栏按钮" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TTB_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="TOOLBAR_DISABLED" VERSION="1" LANGU="1" DESCRIPT="工具栏按钮" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TTB_BUTTON" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="T_FCAT" VERSION="1" LANGU="1" DESCRIPT="清单观察器控制的字段目录" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_T_FCAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="T_FILT" VERSION="1" LANGU="1" DESCRIPT="ALV 控制: 筛选器条件表" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_T_FILT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="T_SORT" VERSION="1" LANGU="1" DESCRIPT="ALV 控制：排序标准表" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVC_T_SORT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ALV" CMPNAME="T_TOOLBAR_EXCLUDING" VERSION="1" LANGU="1" DESCRIPT="Function Code Table" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="UI_FUNCTIONS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_ALV" REFCLSNAME="CL_GUI_ALV_GRID" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_ALV" REFCLSNAME="CL_GUI_ALV_GRID" VERSION="1" MTDNAME="SET_FRONTEND_FIELDCATALOG" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_ALV" REFCLSNAME="CL_GUI_ALV_GRID" VERSION="1" MTDNAME="SET_FRONTEND_LAYOUT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_ALV" REFCLSNAME="CL_GUI_ALV_GRID" VERSION="1" MTDNAME="SET_SORT_CRITERIA" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_ALV" CMPNAME="ADD_BUTTONS" VERSION="1" LANGU="1" DESCRIPT="添加按钮到toolbar" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="ADD_BUTTONS" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="buttons" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method add_buttons.

  data:
        lw_button type line of ttb_button,
        lv_key type char50,
        lv_value type char50,
        lw_cols type string ,
       lw_fields like lw_cols,
       lt_cols like table of lw_cols,
       lt_fields like table of lw_cols.
  field-symbols: &lt;key&gt; type any.

  split iv_str at &apos;;&apos; into table lt_cols.
  loop at lt_cols into lw_cols.
    split lw_cols at &apos;,&apos; into table lt_fields.
    loop at lt_fields into lw_fields.
      clear:lv_key,lv_value.
      split lw_fields at &apos;:&apos; into lv_key lv_value.
      lv_key = to_upper( lv_key ).
      assign component lv_key of structure lw_button to &lt;key&gt;.
      if sy-subrc = 0.
        &lt;key&gt; = lv_value.
      endif.
    endloop.
    IF sy-subrc = 0..
      append lw_button to TOOLBAR_ADDED.
      delete TOOLBAR_deleted where function = lw_button-function.
    ENDIF.
  endloop.
  TRY.
      me-&gt;set_toolbar_interactive(  ).
    CATCH cx_root.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="BUILD_PARENT" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="23 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method build_parent.
  data lo_parent type ref to cl_gui_custom_container.
*  data lo_splitter type ref to cl_gui_splitter_container.
*  data rows                    type i.
*  data columns                 type i.
*  data row                    type i.
*  data column                 type i.

  if o_parent is initial.
    create object lo_parent
      exporting
        container_name = &apos;CONTROL&apos;
        repid          = &apos;SAPLZALV&apos;
        dynnr          = &apos;100&apos;.
    o_parent = lo_parent.

*    if   split_direction is not initial.
*      case split_direction.
*        when &apos;L&apos; or &apos;l&apos;.
*          rows = 1.columns = 2.
*          row = 1. column = 1.
*        when &apos;R&apos; or &apos;r&apos;.
*          rows = 1.columns = 2.
*          row = 1. column = 2.
*        when &apos;T&apos; or &apos;t&apos;.
*          rows = 2.columns = 1.
*          row = 1. column = 1.
*        when &apos;B&apos; or &apos;b&apos;.
*          rows = 2.columns = 1.
*          row = 2. column = 1.
*      endcase. .
*
*      create object o_splitter
*        exporting
**        link_dynnr        = link_dynnr
**        link_repid        = link_repid
**        shellstyle        = shellstyle
**        left              = left
**        top               = top
**        width             = width
**        height            = height
**        metric            = cntl_metric_dynpro
**        align             =
*          parent            = lo_parent
*          rows              = rows
*          columns           = columns
**        no_autodef_progid_dynnr = no_autodef_progid_dynnr
**        name              = name
*        exceptions
*          cntl_error        = 1
*          cntl_system_error = 2
*          others            = 3
*          .
*      if sy-subrc &lt;&gt; 0.
*        message id sy-msgid type sy-msgty number sy-msgno
*                   with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*      endif.
*
*      o_parent = o_splitter-&gt;get_container( row = row column = column ).
*    ELSE.
*      o_parent = lo_parent.
*
*    endif.
*
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="COLLECT_DIMENSION" VERSION="1" LANGU="1" DESCRIPT="合并数据" EXPOSURE="2" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="USER_COMMAND" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="COLLECT_DIMENSION" SCONAME="E_UCOMM" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method collect_dimension.
  data ls_fcat like line of t_fcat.
  data lw_temp type ref to data.
  data lt_temp type ref to data.
  data lw_outtab type ref to data.
  data lw_sourcedata type ref to data.

  field-symbols &lt;source_data&gt; type any table.
  field-symbols &lt;outtab&gt; type any table.
  field-symbols &lt;t_temp&gt; type any table.
  field-symbols &lt;wa_outtab&gt; type any .
  field-symbols &lt;wa_temp&gt; type any .

  check e_ucomm = &apos;&amp;SET_DIM&apos;.


  me-&gt;get_frontend_fieldcatalog( importing et_fieldcatalog = t_fcat ).

  assign outtab-&gt;* to &lt;outtab&gt;.
  COLLECT_mode_activated = abap_true.

*--------------------------------------------------------------------*
&quot;将每次合并前的数据放入备份表，用于恢复
  create data lw_sourcedata like &lt;OUTTAB&gt;.
  assign lw_sourcedata-&gt;* to &lt;SOURCE_DATA&gt;.
  &lt;SOURCE_DATA&gt; = &lt;OUTTAB&gt;.
  APPEND lw_sourcedata to source_Data .

  APPEND t_fcat TO FCAT_TABLE.
*--------------------------------------------------------------------*
  lt_temp = me-&gt;CREATE_DYNAMIC_TABLE( ).
  assign lt_temp-&gt;* to &lt;t_temp&gt;.

  create data lw_temp like line of &lt;t_temp&gt;.
  assign lw_temp-&gt;* to &lt;wa_temp&gt;.

  try.
    loop at &lt;source_data&gt; assigning &lt;wa_outtab&gt;.
      move-corresponding &lt;wa_outtab&gt; to &lt;wa_temp&gt;.
        collect &lt;wa_temp&gt; into &lt;t_temp&gt;.
    endloop.
  catch CX_SY_ARITHMETIC_OVERFLOW .
    message &apos;值溢出,无法合并&apos; type &apos;I&apos;.
    RESET_Data( ).
    return.
  endtry.

  unassign &lt;wa_outtab&gt;.

  create data LW_OUTTAB like line of &lt;OUTTAB&gt;.
  assign LW_OUTTAB-&gt;* to &lt;wa_outtab&gt;.
  clear &lt;OUTTAB&gt;.
  LOOP AT &lt;t_temp&gt; assigning &lt;wa_temp&gt;.
    move-corresponding &lt;wa_temp&gt; to &lt;wa_outtab&gt;.
    insert &lt;wa_outtab&gt; into table &lt;OUTTAB&gt;.
  ENDLOOP.
  enable_button( |&amp;RESET_DIM,| ).
*--------------------------------------------------------------------*
  free:
    ls_fcat ,
    lw_temp ,
    lt_temp ,
    lw_outtab ,
    lw_sourcedata .
  unassign:
    &lt;source_data&gt;,
    &lt;outtab&gt; ,
    &lt;t_temp&gt; ,
    &lt;wa_outtab&gt; ,
    &lt;wa_temp&gt; .

  refresh( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="CREATE" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_PARENT" VERSION="1" LANGU="1" DESCRIPT="Abstract Container for GUI Controls" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_GUI_CONTAINER" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_POPUP" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_TOP" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="50"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_LEFT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="50"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_HEIGHT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="250"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_WIDTH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="500"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_REPID" VERSION="1" LANGU="1" DESCRIPT="调用程序" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0" TYPE="SY-CPROG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_DYNNR" VERSION="1" LANGU="1" DESCRIPT="当前屏幕编号" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DYNNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_CAPTION" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_STYLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="COLLECT_MODE" VERSION="1" LANGU="1" DESCRIPT="激活collect mode" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="I_SPLIT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="CT_TABLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY TABLE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE" SCONAME="RO_ALV" VERSION="1" LANGU="1" DESCRIPT="ALV" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_ALV"/>
   <source>method create.
  data lo_parent type ref to cl_gui_container.
  data: lo_custom_container type ref to cl_gui_custom_container.
  data lo_dialogbox_container type ref to cl_gui_dialogbox_container.
  data lv_style type i.
  data lv_container_name type char50 value &apos;CONTAINER&apos;.
*  data lo_splitter type ref to cl_gui_splitter_container.
*  data rows                    type i.
*  data columns                 type i.
*  data row                    type i.
*  data column                 type i.


  if i_parent is supplied.
    lo_parent = i_parent.
*  else.
*    create object lo_custom_container
*      exporting
*        container_name = lv_container_name
*        style          = i_style
*        repid          = i_repid
*        dynnr          = i_dynnr.
*    lo_parent ?= lo_custom_container.
  endif.

  if i_popup = abap_true.&quot; is supplied.
    create object lo_dialogbox_container
      exporting
        style   = i_style
        dynnr   = i_dynnr
        caption = i_caption
        width   = i_width
        height  = i_height
        top     = i_top
        left    = i_left.
    lo_parent = lo_dialogbox_container.
  endif.
*  if i_split is not initial.
*    case i_split.
*      when &apos;L&apos; or &apos;l&apos;.
*        rows = 1.columns = 2.
*        row = 1. column = 1.
*      when &apos;R&apos; or &apos;r&apos;.
*        rows = 1.columns = 2.
*        row = 1. column = 2.
*      when &apos;T&apos; or &apos;t&apos;.
*        rows = 2.columns = 1.
*        row = 1. column = 1.
*      when &apos;B&apos; or &apos;b&apos;.
*        rows = 2.columns = 1.
*        row = 2. column = 1.
*    endcase. .
*
*    create object lo_splitter
*      exporting
**        link_dynnr        = link_dynnr
**        link_repid        = link_repid
**        shellstyle        = shellstyle
**        left              = left
**        top               = top
**        width             = width
**        height            = height
**        metric            = cntl_metric_dynpro
**        align             =
*        parent            = lo_parent
*        rows              = rows
*        columns           = columns
**        no_autodef_progid_dynnr = no_autodef_progid_dynnr
**        name              = name
*      exceptions
*        cntl_error        = 1
*        cntl_system_error = 2
*        others            = 3
*        .
*    if sy-subrc &lt;&gt; 0.
*      message id sy-msgid type sy-msgty number sy-msgno
*                 with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    endif.
*
*    lo_parent = lo_splitter-&gt;get_container( row = row column = column ).
*  endif.

  create object ro_alv
    exporting
      i_parent = lo_parent.

*  if lo_splitter is not initial.
*    ro_alv-&gt;o_splitter = lo_splitter.
*  endif.
*  ro_alv-&gt;split_direction = i_split.

  if i_popup = abap_true.
    set handler ro_alv-&gt;event_popup_close for lo_dialogbox_container.
  endif.

  ro_alv-&gt;o_parent = lo_parent.
  get reference of ct_table into ro_alv-&gt;outtab.

  field-symbols &lt;sourcedata&gt; type any table.

  set handler ro_alv-&gt;event_toolbar_internal for ro_alv.

  check collect_mode = abap_true.
  ro_alv-&gt;add_buttons( |function:&amp;SET_DIM,text:合并数据,icon:{ icon_segmented_data_act },quickinfo:将显示的列进行合并，值自动求和;| &amp;
                       |function:&amp;RESET_DIM,text:取消合并,icon:{ icon_segmented_data_ina },quickinfo:恢复合并前的数据,DISABLED:X;| ).
  set handler ro_alv-&gt;collect_dimension ro_alv-&gt;reset_data  for ro_alv.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="CREATE_DYNAMIC_TABLE" VERSION="1" LANGU="1" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="CREATE_DYNAMIC_TABLE" SCONAME="TABLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>method CREATE_DYNAMIC_TABLE.
  DATA lt_comp TYPE  abap_component_tab. &quot;动态内表的结构
  DATA ls_comp LIKE LINE OF  lt_comp.
  DATA lr_struc TYPE REF TO cl_abap_structdescr.
  DATA lr_table TYPE REF TO cl_abap_tabledescr.
  data ls_fcat like line of t_fcat.
  data lo_wa type ref to data.
  field-symbols &lt;OUTTAB&gt; type any table.
  field-symbols &lt;wa&gt; type any.
  field-symbols &lt;field&gt; type any.

  assign OUTTAB-&gt;* to &lt;OUTTAB&gt;.
  create data lo_wa like line of &lt;OUTTAB&gt;.
  assign lo_wa-&gt;* to &lt;wa&gt;.

  LOOP AT T_FCAT INTO LS_FCAT WHERE NO_OUT = ABAP_FALSE AND TECH = ABAP_FALSE .
    assign component ls_fcat-fieldname OF structure &lt;wa&gt; TO &lt;field&gt;.
    ls_comp-type ?= cl_abap_datadescr=&gt;describe_by_DATA(  P_DATA  = &lt;field&gt; ).&quot;&lt;dyn_table&gt; ).
    ls_comp-NAME = ls_fcat-fieldname.
    ls_comp-as_include = &apos;&apos;.
    APPEND ls_comp TO lt_comp.
  endloop.
*  根据字段目录创建动态结构类型
  lr_struc = cl_abap_structdescr=&gt;create( p_components = lt_comp ).
*  根据动态结构创建动态内表类型
  lr_table = cl_abap_tabledescr=&gt;create( p_line_type = lr_struc ).

  CREATE DATA table TYPE HANDLE lr_table.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="DELETE_BUTTON" VERSION="1" LANGU="1" DESCRIPT="删除toolbar的按钮" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DELETE_BUTTON" SCONAME="IV_STR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method DELETE_BUTTON.
  data : lt_button type table of UI_FUNC,
         lv_button type UI_FUNC.
  field-symbols &lt;tb&gt; type stb_button.

  split iv_str at &apos;,&apos; into table lt_button.

  LOOP AT lt_button into lv_button.
    read table TOOLBAR_ADDED with key FUNCTION = lv_button assigning &lt;tb&gt;.
    if sy-subrc = 0.
      append &lt;tb&gt; to TOOLBAR_deleted.
      delete TOOLBAR_ADDED where function = lv_button.
    endif.
  ENDLOOP.
  TRY.
      me-&gt;set_toolbar_interactive(  ).
    CATCH cx_root.
  ENDTRY.
  TRY.
      me-&gt;set_toolbar_interactive(  ).
    CATCH cx_root.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="DISABLE_BUTTON" VERSION="1" LANGU="1" DESCRIPT="禁止toolbar的按钮" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DISABLE_BUTTON" SCONAME="IV_STR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method DISABLE_BUTTON.
  data : lt_button type table of UI_FUNC,
         lv_button type UI_FUNC.
  field-symbols &lt;tb&gt; type stb_button.

  split iv_str at &apos;,&apos; into table lt_button.

  LOOP AT lt_button into lv_button.
    read table TOOLBAR_ADDED with key FUNCTION = lv_button assigning &lt;tb&gt;.
    if sy-subrc = 0.
      &lt;tb&gt;-disabled = abap_true.
    endif.
  ENDLOOP.
  TRY.
      me-&gt;set_toolbar_interactive(  ).
    CATCH cx_root.
  ENDTRY.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="DISPLAY" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DISPLAY" SCONAME="I_CONSISTENCY_CHECK" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DISPLAY" SCONAME="I_STRUCTURE_NAME" VERSION="1" LANGU="1" DESCRIPT="表名" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DD02L-TABNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DISPLAY" SCONAME="I_SAVE" VERSION="1" LANGU="1" DESCRIPT="&apos;X&apos; 只能保存为全局标准变式，&apos;U&apos; 只能保存特定用户变式，&apos;A&apos;都可以保存，SPACE不能保存" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;A&apos;"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="DISPLAY" SCONAME="I_DEFAULT" VERSION="1" LANGU="1" DESCRIPT="是否可以设置默认的布局变式" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR01" PARVALUE="ABAP_TRUE"/>
   <source>method display.
  field-symbols: &lt;outtab&gt; type standard table.
  if o_parent is not initial.
    first_show = abap_false.
    assign outtab-&gt;* to &lt;outtab&gt;.
    if gs_variant-report is initial.
      gs_variant-report = sy-cprog.
    endif.
    me-&gt;SET_VISIBLE( visible_false ).
    set_table_for_first_display(
      exporting
*      i_buffer_active               = i_buffer_active
*      i_bypassing_buffer            = i_bypassing_buffer
      i_consistency_check           = i_consistency_check
      i_structure_name              = i_structure_name
      is_variant                    = gs_variant
      i_save                        = i_save
        i_default                     = i_default
        is_layout                     = s_layo
*      is_print                      = is_print
*      it_special_groups             = it_special_groups
      it_toolbar_excluding          = t_toolbar_excluding
*      it_hyperlink                  = it_hyperlink
*      it_alv_graphics               = it_alv_graphics
*      it_except_qinfo               = it_except_qinfo
*      ir_salv_adapter               = ir_salv_adapter
      changing
        it_outtab                     = &lt;outtab&gt;
        it_fieldcatalog               = t_fcat
        it_sort                       = t_sort
        it_filter                     = t_filt
      exceptions
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
           ).
    if sy-subrc &lt;&gt; 0.
*   Implement suitable error handling here
    endif.
  else.
    call function &apos;ZALV_SHOW&apos;
      exporting io_alv = me.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="ENABLE_BUTTON" VERSION="1" LANGU="1" DESCRIPT="允许toolbar的按钮" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="ENABLE_BUTTON" SCONAME="IV_STR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method enable_button.
  data : lt_button type table of ui_func,
         lv_button type ui_func.
  field-symbols &lt;tb&gt; type stb_button.

  split iv_str at &apos;,&apos; into table lt_button.

  loop at lt_button into lv_button.
    read table toolbar_added with key function = lv_button assigning &lt;tb&gt;.
    if sy-subrc = 0.
      &lt;tb&gt;-disabled = abap_false.
    endif.
  endloop.
  TRY.
      me-&gt;set_toolbar_interactive(  ).
    CATCH cx_root.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_BUTTON_CLICK" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="BUTTON_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_BUTTON_CLICK" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_BUTTON_CLICK" SCONAME="ES_COL_ID" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_BUTTON_CLICK" SCONAME="ES_ROW_NO" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_BUTTON_CLICK.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;BUTTON_CLICK&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using es_col_id
          es_row_no
          sender.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="DATA_CHANGED" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="ER_DATA_CHANGED" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="E_ONF4" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="E_ONF4_BEFORE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="E_ONF4_AFTER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED" SCONAME="E_UCOMM" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_DATA_CHANGED.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;DATA_CHANGED&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using er_data_changed
          e_onf4
          e_onf4_before
          e_onf4_after
          e_ucomm
          sender.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED_FINISHED" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="DATA_CHANGED_FINISHED" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED_FINISHED" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED_FINISHED" SCONAME="E_MODIFIED" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DATA_CHANGED_FINISHED" SCONAME="ET_GOOD_CELLS" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_DATA_CHANGED_FINISHED.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;DATA_CHANGED_FINISHED&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using e_modified
          et_good_cells
          sender.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_DOUBLE_CLICK" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="DOUBLE_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DOUBLE_CLICK" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DOUBLE_CLICK" SCONAME="E_ROW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DOUBLE_CLICK" SCONAME="E_COLUMN" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_DOUBLE_CLICK" SCONAME="ES_ROW_NO" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_DOUBLE_CLICK.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;DOUBLE_CLICK&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using e_row
          e_column
          es_row_no
          sender.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_HOTSPOT_CLICK" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="HOTSPOT_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_HOTSPOT_CLICK" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_HOTSPOT_CLICK" SCONAME="E_ROW_ID" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_HOTSPOT_CLICK" SCONAME="E_COLUMN_ID" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_HOTSPOT_CLICK" SCONAME="ES_ROW_NO" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_HOTSPOT_CLICK.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;HOTSPOT_CLICK&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using e_row_id
          e_column_id
          es_row_no
          sender.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_POPUP_CLOSE" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_DIALOGBOX_CONTAINER" REFCMPNAME="CLOSE" BCMTDCAT="00" BCMTDSYN="0">
   <source>method EVENT_POPUP_CLOSE.
  o_parent-&gt;set_visible( cl_gui_control=&gt;visible_false ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_TOOLBAR_INTERNAL" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="TOOLBAR" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_TOOLBAR_INTERNAL" SCONAME="E_OBJECT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_TOOLBAR_INTERNAL" SCONAME="E_INTERACTIVE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method EVENT_TOOLBAR_INTERNAL.
    FIELD-SYMBOLS: &lt;toolbar&gt; LIKE LINE OF e_object-&gt;mt_toolbar,
                   &lt;tb&gt; LIKE LINE OF toolbar_added.

  LOOP AT TOOLBAR_ADDED assigning &lt;tb&gt;.
    read table e_object-&gt;mt_toolbar[] with key function = &lt;tb&gt;-function assigning &lt;toolbar&gt;.
    if sy-subrc = 0.
      &lt;toolbar&gt; = &lt;tb&gt;.
    else.
      append &lt;tb&gt; to e_object-&gt;mt_toolbar.
    endif.
  ENDLOOP.

  LOOP AT TOOLBAR_deleted assigning &lt;tb&gt;    .
    delete e_object-&gt;mt_toolbar where function = &lt;tb&gt;-function.
  ENDLOOP.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EVENT_USER_COMMAND" VERSION="1" LANGU="1" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="USER_COMMAND" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_USER_COMMAND" SCONAME="SENDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EVENT_USER_COMMAND" SCONAME="E_UCOMM" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>method EVENT_USER_COMMAND.
  data lw_form type _ty_s_form.
  read table GT_FORM into lw_form with key eventid = &apos;USER_COMMAND&apos;.
  check sy-subrc = 0.
  perform (lw_form-formname) in program (lw_form-repid) if found
    using E_UCOMM
          sender.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="EXCLUDE_FUNCTION" VERSION="1" LANGU="1" DESCRIPT="不显示alv的标准按钮" EXPOSURE="2" STATE="1" EDITORDER="24 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="EXCLUDE_FUNCTION" SCONAME="IV_FUNC" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method exclude_function.
*  data : lt_func type table of ui_func,
*         lv_func type ui_func.
*  field-symbols &lt;tb&gt; type stb_button.

  split iv_func at &apos;,&apos; into table t_toolbar_excluding.


endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="HIDE" VERSION="1" LANGU="1" DESCRIPT="隐藏alv" EXPOSURE="2" STATE="1" EDITORDER="25 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="HIDE" SCONAME="IV_HIDE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <source>method hide.
  if iv_hide = abap_true.
    SET_VISIBLE( visible_false ).
    o_parent-&gt;set_visible( visible_false ).
  else.
    set_visible( visible_true ).
    o_parent-&gt;set_visible( visible_true ).
  endif.
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="PAI" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="22 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PAI.
  CASE SY-UCOMM.
    WHEN &apos;BACK&apos; OR &apos;QUIT&apos; OR &apos;CANCLE&apos;.
      leave TO screen 0.
    WHEN OTHERS.
  ENDCASE.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="PBO" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="21 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PBO.
  SET pf-status &apos;PF01&apos; of program &apos;SAPLZALV&apos;.
  SET titlebar &apos;TT01&apos; OF program &apos;SAPLZALV&apos; WITH TITLE.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="REFRESH" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="REFRESH" SCONAME="I_SOFT_REFRESH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="REFRESH" SCONAME="I_STABLE_ROW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="REFRESH" SCONAME="I_STABLE_COL" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <source>method REFRESH.
    DATA: ls_stable TYPE lvc_s_stbl.
    CLEAR: ls_stable.
    ls_stable-row = i_stable_row.
    ls_stable-col = i_stable_col.
    me-&gt;refresh_table_display(
      EXPORTING
        is_stable      =     ls_stable &quot; With Stable Rows/Columns
        i_soft_refresh =     i_soft_refresh&quot; Without Sort, Filter, etc.
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2
    ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="RESET_DATA" VERSION="1" LANGU="1" DESCRIPT="取消合并" EXPOSURE="2" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_ALV" REFCMPNAME="USER_COMMAND" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="RESET_DATA" SCONAME="E_UCOMM" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method reset_data.
  field-symbols &lt;source_data&gt; type any table.
  field-symbols &lt;outtab&gt; type any table.
  data lw_sourcedata type ref to data.

  check e_ucomm = &apos;&amp;RESET_DIM&apos; and collect_mode_activated = abap_true.

  read table source_Data into LW_SOURCEDATA index lines( source_Data ).
  check sy-subrc = 0.
  delete source_Data index lines( source_Data ).
  if lines( source_Data ) = 0.
    COLLECT_mode_activated = abap_false.
    DISABLE_BUTTON( |&amp;RESET_DIM,| ).
  endif.
  assign LW_SOURCEDATA-&gt;* to &lt;source_data&gt;.
  assign outtab-&gt;* to &lt;outtab&gt;.

  &lt;outtab&gt; = &lt;source_data&gt;.

  IF LINES( FCAT_TABLE ) &gt; 0.
    read table FCAT_TABLE INTO t_fcat INDEX LINES( FCAT_TABLE ).
    DELETE FCAT_TABLE INDEX LINES( FCAT_TABLE ).
    ME-&gt;SET_FRONTEND_FIELDCATALOG( T_FCAT ).
  ENDIF.
  refresh( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_ALV_STYLES" VERSION="1" LANGU="1" DESCRIPT="设置alv" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ALV_STYLES" SCONAME="IV_STYLE" VERSION="1" LANGU="1" DESCRIPT="样式" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_STYLE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ALV_STYLES" SCONAME="IV_FIELDNAME" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ALV_STYLES" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method SET_ALV_STYLES.
  field-symbols &lt;styles&gt; type lvc_t_styl.
  field-symbols &lt;style&gt; type lvc_s_styl.
  field-symbols &lt;comp&gt; type any.
  data ls_style type lvc_s_styl.

  get_frontend_layout( importing es_layout =  s_layo ).

  if s_layo-stylefname is initial.
    do.&quot;获取stylefname
      assign component sy-index of structure cv_wa to &lt;comp&gt;.
      if sy-subrc &lt;&gt; 0.
        free &lt;comp&gt;.
        exit.
      endif.
      if cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;comp&gt; )-&gt;absolute_name = &apos;\TYPE=LVC_T_STYL&apos;.
        s_layo-stylefname = cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;comp&gt; )-&gt;get_relative_name( ).
        set_frontend_layout( s_layo ).
        assign &lt;comp&gt; to &lt;styles&gt;.
        free &lt;comp&gt;.
        exit.
      endif.
    enddo.
  else.
    assign component s_layo-stylefname of structure cv_wa to &lt;styles&gt;.
  endif.

  check &lt;styles&gt; is assigned.
  loop at &lt;styles&gt; assigning &lt;style&gt; where fieldname = iv_fieldname.
    &lt;style&gt;-style = iv_style.
  endloop.
  if sy-subrc ne 0.
    ls_style-fieldname = iv_fieldname.
    insert ls_style into table &lt;styles&gt; assigning &lt;style&gt;.
    &lt;style&gt;-style = iv_style.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_BUTTON" VERSION="1" LANGU="1" DESCRIPT="添加单元格按钮" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_BUTTON" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_BUTTON" SCONAME="IV_ROW" VERSION="1" LANGU="1" DESCRIPT="内部表的索引" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-TABIX" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_BUTTON" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method SET_CELLS_BUTTON.
  field-symbols &lt;outtab&gt; type STANDARD TABLE.
  field-symbols &lt;row&gt; type any.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.


  split to_upper( iv_str ) at &apos;,&apos; into table lt_fieldnames.

  check lt_fieldnames is not initial.

  if cv_wa is supplied.
    assign cv_wa to &lt;row&gt;.
  elseif iv_row is supplied.
    assign outtab-&gt;* to &lt;outtab&gt;.
    check sy-subrc = 0.
    read table &lt;outtab&gt; index iv_row assigning &lt;row&gt;.
  endif.

  check sy-subrc = 0.
  LOOP AT lt_fieldnames into lv_fieldname.
    set_alv_styles( exporting iv_fieldname = lv_fieldname iv_style = mc_style_button changing cv_wa = &lt;row&gt;  ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_DISABLE" VERSION="1" LANGU="1" DESCRIPT="单元格不可编辑" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_DISABLE" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_DISABLE" SCONAME="IV_ROW" VERSION="1" LANGU="1" DESCRIPT="内部表的索引" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-TABIX" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_DISABLE" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method SET_CELLS_DISABLE.
  field-symbols &lt;outtab&gt; type STANDARD TABLE.
  field-symbols &lt;row&gt; type any.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.


  split to_upper( iv_str ) at &apos;,&apos; into table lt_fieldnames.

  check lt_fieldnames is not initial.

  if cv_wa is supplied.
    assign cv_wa to &lt;row&gt;.
  elseif iv_row is supplied.
    assign outtab-&gt;* to &lt;outtab&gt;.
    check sy-subrc = 0.
    read table &lt;outtab&gt; index iv_row assigning &lt;row&gt;.
  endif.

  check sy-subrc = 0.
  LOOP AT lt_fieldnames into lv_fieldname.
    set_alv_styles( exporting iv_fieldname = lv_fieldname iv_style  = mc_style_disabled changing cv_wa = &lt;row&gt;  ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_ENABLE" VERSION="1" LANGU="1" DESCRIPT="单元格可编辑" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_ENABLE" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_ENABLE" SCONAME="IV_ROW" VERSION="1" LANGU="1" DESCRIPT="内部表的索引" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-TABIX" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_ENABLE" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method SET_CELLS_ENABLE.
  field-symbols &lt;outtab&gt; type STANDARD TABLE.
  field-symbols &lt;row&gt; type any.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.


  split to_upper( iv_str ) at &apos;,&apos; into table lt_fieldnames.

  check lt_fieldnames is not initial.

  if cv_wa is supplied.
    assign cv_wa to &lt;row&gt;.
  elseif iv_row is supplied.
    assign outtab-&gt;* to &lt;outtab&gt;.
    check sy-subrc = 0.
    read table &lt;outtab&gt; index iv_row assigning &lt;row&gt;.
  endif.

  check sy-subrc = 0.
  LOOP AT lt_fieldnames into lv_fieldname.
    set_alv_styles( exporting iv_fieldname = lv_fieldname iv_style  = mc_style_enabled changing cv_wa = &lt;row&gt;  ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT" VERSION="1" LANGU="1" DESCRIPT="单元格设为热点" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT" SCONAME="IV_ROW" VERSION="1" LANGU="1" DESCRIPT="内部表的索引" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-TABIX" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method SET_CELLS_HOTSPOT.
  field-symbols &lt;outtab&gt; type STANDARD TABLE.
  field-symbols &lt;row&gt; type any.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.


  split to_upper( iv_str ) at &apos;,&apos; into table lt_fieldnames.

  check lt_fieldnames is not initial.

  if cv_wa is supplied.
    assign cv_wa to &lt;row&gt;.
  elseif iv_row is supplied.
    assign outtab-&gt;* to &lt;outtab&gt;.
    check sy-subrc = 0.
    read table &lt;outtab&gt; index iv_row assigning &lt;row&gt;.
  endif.

  check sy-subrc = 0.
  LOOP AT lt_fieldnames into lv_fieldname.
    set_alv_styles( exporting iv_fieldname = lv_fieldname iv_style  = MC_STYLE_HOTSPOT changing cv_wa = &lt;row&gt;  ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT_NO" VERSION="1" LANGU="1" DESCRIPT="单元格取消热点" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT_NO" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT_NO" SCONAME="IV_ROW" VERSION="1" LANGU="1" DESCRIPT="内部表的索引" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-TABIX" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELLS_HOTSPOT_NO" SCONAME="CV_WA" VERSION="1" LANGU="1" DESCRIPT="内表行" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>method set_cells_hotspot_no.
  field-symbols &lt;outtab&gt; type standard table.
  field-symbols &lt;row&gt; type any.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.


  split to_upper( iv_str ) at &apos;,&apos; into table lt_fieldnames.

  check lt_fieldnames is not initial.

  if cv_wa is supplied.
    assign cv_wa to &lt;row&gt;.
  elseif iv_row is supplied.
    assign outtab-&gt;* to &lt;outtab&gt;.
    check sy-subrc = 0.
    read table &lt;outtab&gt; index iv_row assigning &lt;row&gt;.
  endif.

  check sy-subrc = 0.
  loop at lt_fieldnames into lv_fieldname.
    set_alv_styles( exporting iv_fieldname = lv_fieldname iv_style  = mc_style_hotspot_no changing cv_wa = &lt;row&gt;  ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_BUTTON_STATIC" VERSION="1" LANGU="1" DESCRIPT="设置单元格按钮static" EXPOSURE="2" STATE="1" EDITORDER="26 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_BUTTON_STATIC" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段清单" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_BUTTON_STATIC" SCONAME="CS_WA" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method set_cell_button_static.

  field-symbols: &lt;comp&gt; type any,
                 &lt;styles&gt; type lvc_t_styl.
  field-symbols: &lt;fs_style&gt; like line of &lt;styles&gt;.

  data lv_fieldname type char30.
  data lt_fieldnames like  table of lv_fieldname.
  data: ls_style like line of &lt;styles&gt;.

  split iv_str at &apos;,&apos; into table lt_fieldnames.
  check lt_fieldnames is not initial.&quot;包含字段才继续处理
  do.
    assign component sy-index of structure cs_wa to &lt;comp&gt;.
    if sy-subrc &lt;&gt; 0.
      free &lt;comp&gt;.
      exit.
    endif.
    if cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;comp&gt; )-&gt;absolute_name = &apos;\TYPE=LVC_T_STYL&apos;.
      assign component sy-index of structure cs_wa to &lt;styles&gt;.
      exit.
    endif.
  enddo.

  if &lt;styles&gt; is assigned.
    loop at lt_fieldnames into lv_fieldname.
      loop at &lt;styles&gt; assigning &lt;fs_style&gt; where fieldname = lv_fieldname.
        &lt;fs_style&gt;-style = mc_style_button.
      endloop.
      if sy-subrc ne 0.
        clear: ls_style.
        ls_style-fieldname = lv_fieldname.
        ls_style-style = mc_style_button.
        insert ls_style into table &lt;styles&gt;.
      endif.
    endloop.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" VERSION="1" LANGU="1" DESCRIPT="设置单元格颜色" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="字段" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="IV_ROW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="LVC_S_ROID-ROW_ID" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="IV_COL" VERSION="1" LANGU="1" DESCRIPT="ALV 控制: 颜色" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_COL" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="IV_INT" VERSION="1" LANGU="1" DESCRIPT="ALV 控制: 强化" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_INT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="IV_INV" VERSION="1" LANGU="1" DESCRIPT="ALV 控制: 相反" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVC_INV" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_CELL_COLOR" SCONAME="CV_WA" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>METHOD set_cell_color.
    FIELD-SYMBOLS: &lt;outtab&gt; TYPE STANDARD TABLE,
                   &lt;colors&gt; TYPE lvc_t_scol.
    FIELD-SYMBOLS: &lt;row&gt; TYPE any,
                   &lt;fs_color&gt; LIKE LINE OF &lt;colors&gt;.
    field-symbols &lt;comp&gt; type any.

    DATA: ls_color LIKE LINE OF &lt;colors&gt;.
    data  lv_color type LVC_S_COLO.
    data  lt_fieldname type table of fieldname.
    data  lv_fieldname type fieldname.

*&gt;&gt;&gt;为颜色变量赋值
    lv_color-col = iv_col.
    lv_color-int = iv_int.
    lv_color-inv = iv_inv.
*&lt;&lt;&lt;
    if iv_row is supplied.&quot;如果输入了行号,则按行号取内表
      ASSIGN outtab-&gt;* TO &lt;outtab&gt;.
      IF sy-subrc EQ 0.
        READ TABLE &lt;outtab&gt; ASSIGNING &lt;row&gt; INDEX iv_row.
      endif.
    else.
      assign cv_wa to &lt;row&gt;.
    endif.
    IF sy-subrc EQ 0.
      get_frontend_layout( IMPORTING es_layout =  s_layo ).
*      &gt;&gt;&gt;如果ctab_fname未维护,则自动根据字段类型匹配出字段名并重设layout
      if s_layo-ctab_fname is initial.
        do.&quot;获取ctab_fname字段
          assign component sy-index of structure &lt;row&gt; to &lt;comp&gt;.
          if sy-subrc &lt;&gt; 0.
            free &lt;comp&gt;.
            exit.
          endif.
          if cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;comp&gt; )-&gt;absolute_name = &apos;\TYPE=LVC_T_SCOL&apos;.
            s_layo-ctab_fname = cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;comp&gt; )-&gt;get_relative_name( ).&quot;获取字段名
            set_frontend_layout( s_layo ).&quot;重设layout
            free &lt;comp&gt;.
            exit.
          endif.
        enddo.
      endif.
*      &lt;&lt;&lt;
    ENDIF.

    CHECK s_layo-ctab_fname IS NOT INITIAL.

    ASSIGN COMPONENT s_layo-ctab_fname OF STRUCTURE &lt;row&gt; TO &lt;colors&gt;.
    IF sy-subrc EQ 0.
*&gt;&gt;&gt;[1]拆分字符串为字段清单
      split iv_str at &apos;,&apos; into table lt_fieldname.
      LOOP AT lt_fieldname into lv_fieldname.
        translate lv_fieldname to upper case.
        LOOP AT &lt;colors&gt; ASSIGNING &lt;fs_color&gt; WHERE fname = lv_fieldname.
          &lt;fs_color&gt;-color = lv_color.
        ENDLOOP.
        IF sy-subrc NE 0.
          CLEAR: ls_color.
          ls_color-fname = lv_fieldname.
          ls_color-color = lv_color.
          INSERT ls_color INTO TABLE &lt;colors&gt;.
        ENDIF.
      ENDLOOP.
*&lt;&lt;&lt;[1]
    ENDIF.
  ENDMETHOD.                    &quot;set_cell_color</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_EDITABLE" VERSION="1" LANGU="1" DESCRIPT="更改模式" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SET_EDITABLE.
    me-&gt;set_ready_for_input( i_ready_for_input = 1 ).
    me-&gt;register_edit_event(
      EXPORTING
        i_event_id =  me-&gt;mc_evt_modified
      EXCEPTIONS
        error      = 1
        OTHERS     = 2
    ).
    me-&gt;register_edit_event(
      EXPORTING
        i_event_id =  me-&gt;mc_evt_enter
      EXCEPTIONS
        error      = 1
        OTHERS     = 2
    ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" VERSION="1" LANGU="1" DESCRIPT="激活事件及设置调用form" EXPOSURE="2" STATE="1" EDITORDER="29 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" SCONAME="IV_EVENTID" VERSION="1" LANGU="1" DESCRIPT="事件名称" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR50"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" SCONAME="IV_FORMNAME" VERSION="1" LANGU="1" DESCRIPT="FORM 名称" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR50"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" SCONAME="IV_REPID" VERSION="1" LANGU="1" DESCRIPT="ABAP 程序名称" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="REPID" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" SCONAME="IV_ACTIVE" VERSION="1" LANGU="1" DESCRIPT="是否启用" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_EVENT" SCONAME="RO_ALV" VERSION="1" LANGU="1" DESCRIPT="ALV" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_ALV"/>
   <source>method SET_EVENT.
  data lw_form type _ty_s_form.
  data l_exist type c.
  read table GT_FORM into lw_form with key eventid = iv_eventid.
  if sy-subrc = 0.
    l_exist = ABAP_TRUE.
  endif.

  lw_form-eventid = iv_eventid.
  lw_form-formname = iv_formname.
  if iv_repid is supplied and iv_repid is not initial.
    lw_form-repid = iv_repid.
  else.
    lw_form-repid = sy-CPROG.
  endif.
  if iv_active = ABAP_true.
    if l_exist = ABAP_TRUE.
      modify GT_FORM from lw_form transporting formname repid where eventid = iv_eventid .
    else.
      append lw_form to GT_FORM.
    endif.
  else.
    delete GT_FORM where eventid = iv_eventid.
  endif.
  CASE iv_eventid.
    WHEN &apos;HOTSPOT_CLICK&apos;.
      SET handler EVENT_HOTSPOT_CLICK FOR ME .
    WHEN &apos;DATA_CHANGED&apos;.
      SET handler EVENT_DATA_CHANGED FOR ME.
    WHEN &apos;DATA_CHANED_FINISHED&apos;.
      SET handler EVENT_DATA_CHANGED_FINISHED FOR ME.
    WHEN &apos;USER_COMMAND&apos;.
      SET handler EVENT_USER_COMMAND FOR ME.
    WHEN &apos;BUTTON_CLICK&apos;.
      SET handler EVENT_BUTTON_CLICK FOR ME.
    WHEN &apos;DOUBLE_CLICK&apos;.
      SET handler EVENT_DOUBLE_CLICK FOR ME.
  ENDCASE.
  ro_alv = me.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_FCAT" VERSION="1" LANGU="1" DESCRIPT="设置field catalog" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_FCAT" SCONAME="IV_STR" VERSION="1" LANGU="1" DESCRIPT="fcat string" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_FCAT" SCONAME="IV_RESET" VERSION="1" LANGU="1" DESCRIPT="initial fcat table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_FCAT" SCONAME="RO_ALV" VERSION="1" LANGU="1" DESCRIPT="ALV" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_ALV"/>
   <source>method set_fcat.
  &quot;fcat_str eg. | fieldname:matnr,col_pos:1,edit:{ abap_true }; | &amp;
  &quot;             | fieldname:mtart,stylename:{ styles },edit:{ abap_true } |
  data:
        lw_fcat type lvc_s_fcat,
        lv_key type char50,
        lv_value type char50,
        lw_cols type string ,
       lw_fields like lw_cols,
       lt_cols like table of lw_cols,
       lt_fields like table of lw_cols.
  field-symbols: &lt;key&gt; type any,&lt;fcat&gt; like lw_fcat.

  if iv_reset = abap_true.
    clear t_fcat.
  endif.

  split IV_str at &apos;;&apos; into table lt_cols.
  loop at lt_cols into lw_cols.
    split lw_cols at &apos;,&apos; into table lt_fields.
    loop at lt_fields into lw_fields.
      clear:lv_key,lv_value.
      split lw_fields at &apos;:&apos; into lv_key lv_value.
      lv_key = to_upper( lv_key ).
      if lv_key = &apos;TEXT&apos;.
        lw_fcat-COLTEXT = LV_VALUE.
        lw_fcat-SCRTEXT_L = LV_VALUE.
        lw_fcat-SCRTEXT_M = LV_VALUE.
        lw_fcat-SCRTEXT_S = LV_VALUE.
      ELSE.
        assign component lv_key of structure lw_fcat to &lt;key&gt;.
        if sy-subrc = 0.
          &lt;key&gt; = lv_value.
        endif.
      ENDIF.
    endloop.
    read table t_fcat assigning &lt;fcat&gt; with key fieldname = lw_fcat-fieldname.
    if sy-subrc ne 0.
      append lw_fcat to t_fcat assigning &lt;fcat&gt;.
    else.
      &lt;fcat&gt; = lw_fcat.
    endif.
    clear:lw_fcat.
  endloop.
  set_frontend_fieldcatalog( it_fieldcatalog = t_fcat ).
  RO_ALV = ME.
endmethod.</source>
  </method>
  <method CLSNAME="CL_GUI_ALV_GRID" CMPNAME="SET_FRONTEND_FIELDCATALOG" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SET_FRONTEND_FIELDCATALOG.
  t_fcat = it_fieldcatalog.

  SUPER-&gt;SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG ).
endmethod.</source>
  </method>
  <method CLSNAME="CL_GUI_ALV_GRID" CMPNAME="SET_FRONTEND_LAYOUT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SET_FRONTEND_LAYOUT.
  s_layo = is_layout.
  SUPER-&gt;SET_FRONTEND_LAYOUT(
      IS_LAYOUT = IS_LAYOUT
         ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_LAYO" VERSION="1" LANGU="1" DESCRIPT="设置layout" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_LAYO" SCONAME="IV_STR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <source>method SET_LAYO.
  data:
        lv_key type char50,
        lv_value type char50,
       lw_fields type string,
       lt_fields like table of lw_fields.
  field-symbols: &lt;key&gt; type any.

  split iv_str at &apos;,&apos; into table lt_fields.
  loop at lt_fields into lw_fields.
    clear:lv_key,lv_value.
    split lw_fields at &apos;:&apos; into lv_key lv_value.
    lv_key = to_upper( lv_key ).
    assign component lv_key of structure s_layo to &lt;key&gt;.
    if sy-subrc = 0.
      &lt;key&gt; = lv_value.
    endif.
  endloop.
  set_frontend_layout( is_layout = s_layo ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_OUTTAB" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="28 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_OUTTAB" SCONAME="CT_TAB" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY TABLE"/>
   <source>method SET_OUTTAB.
  GET reference of CT_TAB INTO outtab.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_READONLY" VERSION="1" LANGU="1" DESCRIPT="显示模式" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SET_READONLY.
    me-&gt;set_ready_for_input( i_ready_for_input = 0 ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_ROW_COLOR" VERSION="1" LANGU="1" DESCRIPT="设置行的颜色" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ROW_COLOR" SCONAME="IV_COLOR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR04"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ROW_COLOR" SCONAME="IV_ROW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="LVC_S_ROID-ROW_ID" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_ROW_COLOR" SCONAME="CV_WA" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>METHOD set_row_color.
    FIELD-SYMBOLS: &lt;outtab&gt; TYPE STANDARD TABLE,
                   &lt;color&gt;  TYPE char04.
    FIELD-SYMBOLS: &lt;row&gt; TYPE any.
    get_frontend_layout( IMPORTING es_layout =  s_layo ).
    CHECK s_layo-info_fname IS NOT INITIAL.
    if iv_row is supplied.
      ASSIGN outtab-&gt;* TO &lt;outtab&gt;.
      if sy-subrc = 0.
        READ TABLE &lt;outtab&gt; ASSIGNING &lt;row&gt; INDEX iv_row.
      endif.
    else.
      assign cv_wa to &lt;row&gt;.
    endif.
    IF sy-subrc EQ 0.
      ASSIGN COMPONENT s_layo-info_fname OF STRUCTURE &lt;row&gt; TO &lt;color&gt;.
      IF sy-subrc EQ 0.
        &lt;color&gt; = iv_color.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    &quot;set_row_color</source>
  </method>
  <method CLSNAME="ZCL_ALV" CMPNAME="SET_SORT" VERSION="1" LANGU="1" DESCRIPT="设置排序表" EXPOSURE="2" STATE="1" EDITORDER="27 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ALV" CMPNAME="SET_SORT" SCONAME="IV_STR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method set_sort.
  data:
        lw_sort type lvc_s_sort,
        lv_key type char50,
        lv_value type char50,
        lw_cols type string ,
       lw_fields like lw_cols,
       lt_cols like table of lw_cols,
       lt_fields like table of lw_cols.
  field-symbols: &lt;key&gt; type any,&lt;sort&gt; like lw_sort.

  split iv_str at &apos;;&apos; into table lt_cols.
  loop at lt_cols into lw_cols.
    split lw_cols at &apos;,&apos; into table lt_fields.
    loop at lt_fields into lw_fields.
      clear:lv_key,lv_value.
      split lw_fields at &apos;:&apos; into lv_key lv_value.
      lv_key = to_upper( lv_key ).

      assign component lv_key of structure lw_sort to &lt;key&gt;.
      if sy-subrc = 0.
        &lt;key&gt; = lv_value.
      endif.

    endloop.
    read table T_SORT assigning &lt;sort&gt; with key fieldname = lw_sort-fieldname.
    if sy-subrc ne 0.
      append lw_sort to T_SORT assigning &lt;sort&gt;.
    else.
      &lt;sort&gt; = lw_sort.
    endif.
    clear:lw_sort.
  endloop.
  SET_SORT_CRITERIA( T_SORT ).
endmethod.</source>
  </method>
  <method CLSNAME="CL_GUI_ALV_GRID" CMPNAME="SET_SORT_CRITERIA" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method set_sort_criteria.
  t_sort = it_sort.
  super-&gt;set_sort_criteria(
    exporting
      it_sort                   = it_sort
  exceptions
    no_fieldcatalog_available = 1
         ).
  if sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
  endif.

endmethod.</source>
  </method>
 </CLAS>
 <FUGR AREA="ZALV" SPRAS="1" AREAT="自定义alv函数">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZALV" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="201" RLOAD="1" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZALV" DNUM="0100" FNUM="0100" BZMX="200 " BZBR="255 " MILI="204 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="255 " VALP="0 " CUAN="G" SPRA="1" DTEXT="alv">
     <dynprofield FNAM="CONTROL" DIDX="00C8" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="FF" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="0A" ADEZ="0C"/>
     <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE PBO.
*
PROCESS AFTER INPUT.
 MODULE PAI.</dynproflowsource>
    </dynpro>
   </dynpros>
   <pfstatus>
    <pfstatus_sta CODE="PF01" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="PF01"/>
    <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="后退"/>
    <pfstatus_fun CODE="CANCLE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="取消"/>
    <pfstatus_fun CODE="QUIT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="退出"/>
    <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANCLE" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="QUIT" FUNNO="001"/>
    <pfstatus_set STATUS="PF01" FUNCTION="BACK"/>
    <pfstatus_set STATUS="PF01" FUNCTION="CANCLE"/>
    <pfstatus_set STATUS="PF01" FUNCTION="QUIT"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="PF01"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="PF01"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="PF01"/>
    <pfstatus_tit CODE="TT01" TEXT="&amp;1"/>
   </pfstatus>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZALVTOP.                          &quot; Global Data
  INCLUDE LZALVUXX.                          &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZALVF...                          &quot; Subroutines
* INCLUDE LZALVO...                          &quot; PBO-Modules
* INCLUDE LZALVI...                          &quot; PAI-Modules
* INCLUDE LZALVE...                          &quot; Events
* INCLUDE LZALVP...                          &quot; Local class implement.
* INCLUDE LZALVT99.                          &quot; ABAP Unit tests

INCLUDE lzalviom.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZALVIOM" VARCL="X" SUBC="I" APPL="S" RMAND="201" RLOAD="1" UCCHECK="X">
    <include_source>*----------------------------------------------------------------------*
***INCLUDE LZALVIOM.
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  PAI  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module pai input.
  O_CURRENT_ALV-&gt;PAI( ).
endmodule.                 &quot; PAI  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  PBO  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module pbo output.
  O_CURRENT_ALV-&gt;PBO( ).
*  o_current_alv-&gt;BUILD_PARENT( ).
  IF O_CURRENT_ALV-&gt;FIRST_SHOW = ABAP_TRUE.
    O_CURRENT_ALV-&gt;DISPLAY(  ).
  ENDIF.
endmodule.                 &quot; PBO  OUTPUT</include_source>
   </include>
   <include NAME="LZALVTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="201" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL ZALV.                         &quot;MESSAGE-ID ..

DATA:LT_ALVS TYPE table of ref to ZCL_ALV.
DATA O_CURRENT_ALV TYPE ref to ZCL_ALV.
* INCLUDE LZALVD...                          &quot; Local class definition</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZALV_SHOW" STEXT="显示alv">
    <importing PARAMETER="IO_ALV" REFERENCE="X" TYP="REF TO ZCL_ALV" REF_CLASS="X"/>
    <documentation PARAMETER="IO_ALV" KIND="P" STEXT="ALV" INDEX=" 001"/>
    <fm_source>if o_current_alv is not initial.
    o_current_alv-&gt;HIDE( ).
  endif.

  o_current_alv = io_alv.
  append io_alv to lt_alvs.
  o_current_alv-&gt;build_parent( ).
  call screen &apos;100&apos;.

  o_current_alv-&gt;HIDE( ).
  delete lt_alvs index lines( lt_alvs ).

  read table LT_ALVS INTO O_CURRENT_ALV INDEX LINES( LT_ALVS ).
  o_current_alv-&gt;HIDE( abap_false ).</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
</nugget>
